//! Do NOT edit this code.
//! It was automatically generated by Pavex.
//! All manual edits will be lost next time the code is generated.
extern crate alloc;
struct ServerState {
    router: Router,
    application_state: ApplicationState,
}
#[derive(Debug, Clone, serde::Deserialize)]
pub struct ApplicationConfig {
    #[serde(default)]
    pub cookies: biscotti::ProcessorConfig,
    #[serde(default)]
    pub databaseconfig: app::configuration::DatabaseConfig,
    pub server: app::configuration::ServerConfig,
    #[serde(default)]
    pub session: pavex_session::SessionConfig,
    pub staticserverconfig: pavex_static_files::StaticServerConfig,
    pub templateconfig: pavex_tera_template::TemplateConfig,
}
pub struct ApplicationState {
    pub processor: biscotti::Processor,
    pub session_config: pavex_session::SessionConfig,
    pub session_store: pavex_session::SessionStore,
    pub static_server: pavex_static_files::StaticServer,
    pub template_engine: pavex_tera_template::TemplateEngine,
    pub user_service_container: app::routes::auth::UserServiceContainer,
}
impl ApplicationState {
    pub async fn new(
        app_config: crate::ApplicationConfig,
        v0: sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v1: pavex_tera_template::TemplateEngine,
        v2: pavex_static_files::StaticServer,
    ) -> Result<crate::ApplicationState, crate::ApplicationStateError> {
        Ok(Self::_new(v0, v1, v2, app_config.session, app_config.cookies).await)
    }
    async fn _new(
        v0: sqlx_core::pool::Pool<sqlx_postgres::Postgres>,
        v1: pavex_tera_template::TemplateEngine,
        v2: pavex_static_files::StaticServer,
        v3: pavex_session::SessionConfig,
        v4: biscotti::ProcessorConfig,
    ) -> crate::ApplicationState {
        let v5 = app::routes::auth::UserServiceContainer::new(&v0);
        let v6 = pavex_session_sqlx::PostgresSessionStore::new(v0);
        let v7 = <pavex_session::SessionStore as core::convert::From<
            pavex_session_sqlx::PostgresSessionStore,
        >>::from(v6);
        let v8 = pavex::cookie::config_into_processor(v4);
        crate::ApplicationState {
            processor: v8,
            session_config: v3,
            session_store: v7,
            static_server: v2,
            template_engine: v1,
            user_service_container: v5,
        }
    }
}
#[derive(Debug, thiserror::Error)]
pub enum ApplicationStateError {}
pub fn run(
    server_builder: pavex::server::Server,
    application_state: ApplicationState,
) -> pavex::server::ServerHandle {
    async fn handler(
        request: http::Request<hyper::body::Incoming>,
        connection_info: Option<pavex::connection::ConnectionInfo>,
        server_state: std::sync::Arc<ServerState>,
    ) -> pavex::Response {
        let (router, state) = (&server_state.router, &server_state.application_state);
        router.route(request, connection_info, state).await
    }
    let router = Router::new();
    let server_state = std::sync::Arc::new(ServerState {
        router,
        application_state,
    });
    server_builder.serve(handler, server_state)
}
struct Router {
    router: matchit::Router<u32>,
}
impl Router {
    /// Create a new router instance.
    ///
    /// This method is invoked once, when the server starts.
    pub fn new() -> Self {
        Self { router: Self::router() }
    }
    fn router() -> matchit::Router<u32> {
        let mut router = matchit::Router::new();
        router.insert("/", 0u32).unwrap();
        router.insert("/auth/login", 1u32).unwrap();
        router.insert("/auth/logout", 2u32).unwrap();
        router.insert("/auth/register", 3u32).unwrap();
        router.insert("/auth/whoami", 4u32).unwrap();
        router.insert("/ping", 5u32).unwrap();
        router.insert("/static/{path}", 6u32).unwrap();
        router
    }
    pub async fn route(
        &self,
        request: http::Request<hyper::body::Incoming>,
        _connection_info: Option<pavex::connection::ConnectionInfo>,
        #[allow(unused)]
        state: &ApplicationState,
    ) -> pavex::Response {
        let (request_head, request_body) = request.into_parts();
        let request_head: pavex::request::RequestHead = request_head.into();
        let request_body = pavex::request::body::RawIncomingBody::from(request_body);
        let Ok(matched_route) = self.router.at(&request_head.target.path()) else {
            let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter(
                    vec![],
                )
                .into();
            let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                "*",
            );
            return route_0::entrypoint(
                    matched_route_template,
                    &request_head,
                    &allowed_methods,
                    &state.processor,
                    &state.session_config,
                    &state.session_store,
                )
                .await;
        };
        match matched_route.value {
            0u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/",
                        );
                        route_5::entrypoint(
                                matched_route_template,
                                &request_head,
                                &state.template_engine,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &request_head,
                                &allowed_methods,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                }
            }
            1u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/login",
                        );
                        route_1::entrypoint(
                                &request_head,
                                &state.processor,
                                matched_route_template,
                                &state.session_config,
                                &state.session_store,
                                request_body,
                                &state.user_service_container,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/login",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &request_head,
                                &allowed_methods,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                }
            }
            2u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/logout",
                        );
                        route_2::entrypoint(
                                &state.processor,
                                &request_head,
                                matched_route_template,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/logout",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &request_head,
                                &allowed_methods,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                }
            }
            3u32 => {
                match &request_head.method {
                    &pavex::http::Method::POST => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/register",
                        );
                        route_3::entrypoint(
                                request_body,
                                matched_route_template,
                                &request_head,
                                &state.user_service_container,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::POST,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/register",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &request_head,
                                &allowed_methods,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                }
            }
            4u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/whoami",
                        );
                        route_4::entrypoint(
                                &state.processor,
                                &request_head,
                                matched_route_template,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/auth/whoami",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &request_head,
                                &allowed_methods,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                }
            }
            5u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/ping",
                        );
                        route_6::entrypoint(
                                matched_route_template,
                                &request_head,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/ping",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &request_head,
                                &allowed_methods,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                }
            }
            6u32 => {
                match &request_head.method {
                    &pavex::http::Method::GET => {
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/static/{path}",
                        );
                        route_7::entrypoint(
                                matched_route_template,
                                &request_head,
                                &state.static_server,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                    _ => {
                        let allowed_methods: pavex::router::AllowedMethods = pavex::router::MethodAllowList::from_iter([
                                pavex::http::Method::GET,
                            ])
                            .into();
                        let matched_route_template = pavex::request::path::MatchedPathPattern::new(
                            "/static/{path}",
                        );
                        route_0::entrypoint(
                                matched_route_template,
                                &request_head,
                                &allowed_methods,
                                &state.processor,
                                &state.session_config,
                                &state.session_store,
                            )
                            .await
                    }
                }
            }
            i => unreachable!("Unknown route id: {}", i),
        }
    }
}
pub mod route_0 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
        s_2: &'b pavex::router::AllowedMethods,
        s_3: &'c biscotti::Processor,
        s_4: &'d pavex_session::SessionConfig,
        s_5: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::router::AllowedMethods,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        s_4: &'c pavex::request::RequestHead,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_1(s_0.clone(), s_1).await;
        let response = post_processing_1(s_3, s_4, &s_0, response, s_5, s_6, &mut s_2)
            .await;
        let response = post_processing_2(response, s_2, s_3, &s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let response = handler(s_1).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &pavex::router::AllowedMethods,
        v3: &biscotti::Processor,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
    ) -> pavex::Response {
        let v6 = pavex::cookie::ResponseCookies::new();
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v1, v0, v7);
        let v9 = crate::route_0::Next0 {
            s_0: v8,
            s_1: v2,
            s_2: v6,
            s_3: v3,
            s_4: v1,
            s_5: v4,
            s_6: v5,
            next: stage_1,
        };
        let v10 = pavex::middleware::Next::new(v9);
        let v11 = pavex::middleware::wrap_noop(v10).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v11)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex::router::AllowedMethods,
    ) -> pavex::Response {
        let v2 = crate::route_0::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    async fn handler(v0: &pavex::router::AllowedMethods) -> pavex::Response {
        let v1 = pavex::router::default_fallback(v0).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v1)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::Response,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
        v6: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::Response {
        let v7 = pavex::cookie::extract_request_cookies(v1, v0);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v9)
                };
            }
        };
        let v9 = pavex_session::SessionConfig::cookie_config(v4);
        let v10 = pavex_session::IncomingSession::extract(&v8, v9);
        let v11 = pavex_session::Session::new(v5, v4, v10);
        let v12 = pavex_session::finalize_session(v3, v6, v0, v11).await;
        let v13 = match v12 {
            Ok(ok) => ok,
            Err(v13) => {
                return {
                    let v14 = pavex_session::errors::FinalizeError::into_response(&v13);
                    let v15 = pavex::Error::new(v13);
                    app::telemetry::error_logger(&v15, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v14)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v13)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex::router::AllowedMethods,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        s_4: &'c pavex::request::RequestHead,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex_session::SessionStore,
        next: fn(
            pavex_tracing::RootSpan,
            &'a pavex::router::AllowedMethods,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
            &'c pavex::request::RequestHead,
            &'d pavex_session::SessionConfig,
            &'e pavex_session::SessionStore,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self
                .next)(
                self.s_0,
                self.s_1,
                self.s_2,
                self.s_3,
                self.s_4,
                self.s_5,
                self.s_6,
            )
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex::router::AllowedMethods,
        next: fn(&'a pavex_tracing::RootSpan, &'b pavex::router::AllowedMethods) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_1 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a pavex::request::RequestHead,
        s_1: &'b biscotti::Processor,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex_session::SessionConfig,
        s_4: &'d pavex_session::SessionStore,
        s_5: pavex::request::body::RawIncomingBody,
        s_6: &'e app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5, s_6).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a pavex::request::RequestHead,
        mut s_3: pavex_session::Session<'b>,
        s_4: &'c app::routes::auth::UserServiceContainer,
        mut s_5: pavex::cookie::ResponseCookies,
        s_6: &'d biscotti::Processor,
    ) -> pavex::Response {
        let response = wrapping_1(s_1, s_0.clone(), s_2, &mut s_3, s_4).await;
        let response = post_processing_1(response, s_3, &mut s_5, s_6, &s_0).await;
        let response = post_processing_2(response, s_5, s_6, &s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c, 'd, 'e>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'d mut pavex_session::Session<'c>,
        s_4: &'e app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let response = handler(s_1, s_2, s_0, s_3, s_4).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &pavex::request::RequestHead,
        v1: &biscotti::Processor,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex_session::SessionConfig,
        v4: &pavex_session::SessionStore,
        v5: pavex::request::body::RawIncomingBody,
        v6: &app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let v7 = pavex::cookie::extract_request_cookies(v0, v1);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    let v11 = pavex::telemetry::ServerRequestId::generate();
                    let v12 = app::telemetry::root_span(v0, v2, v11);
                    app::telemetry::error_logger(&v10, &v12).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v9)
                };
            }
        };
        let v9 = pavex::telemetry::ServerRequestId::generate();
        let v10 = app::telemetry::root_span(v0, v2, v9);
        let v11 = pavex::cookie::ResponseCookies::new();
        let v12 = pavex_session::SessionConfig::cookie_config(v3);
        let v13 = pavex_session::IncomingSession::extract(&v8, v12);
        let v14 = pavex_session::Session::new(v4, v3, v13);
        let v15 = crate::route_1::Next0 {
            s_0: v10,
            s_1: v5,
            s_2: v0,
            s_3: v14,
            s_4: v6,
            s_5: v11,
            s_6: v1,
            next: stage_1,
        };
        let v16 = pavex::middleware::Next::new(v15);
        let v17 = pavex::middleware::wrap_noop(v16).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v17)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex_tracing::RootSpan,
        v2: &pavex::request::RequestHead,
        v3: &mut pavex_session::Session<'_>,
        v4: &app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let v5 = crate::route_1::Next1 {
            s_0: &v1,
            s_1: v0,
            s_2: v2,
            s_3: v3,
            s_4: v4,
            next: stage_2,
        };
        let v6 = pavex::middleware::Next::new(v5);
        let v7 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v1);
        let v8 = pavex_tracing::logger(v7, v6).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v8)
    }
    async fn handler(
        v0: pavex::request::body::RawIncomingBody,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: &mut pavex_session::Session<'_>,
        v4: &app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let v5 = pavex::request::body::BodySizeLimit::new();
        let v6 = pavex::request::body::BufferedBody::extract(v1, v0, v5).await;
        let v7 = match v6 {
            Ok(ok) => ok,
            Err(v7) => {
                return {
                    let v8 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v7,
                    );
                    let v9 = pavex::Error::new(v7);
                    app::telemetry::error_logger(&v9, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v8)
                };
            }
        };
        let v8 = pavex::request::body::JsonBody::extract(v1, &v7);
        let v9 = match v8 {
            Ok(ok) => ok,
            Err(v9) => {
                return {
                    let v10 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v9,
                    );
                    let v11 = pavex::Error::new(v9);
                    app::telemetry::error_logger(&v11, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v10)
                };
            }
        };
        let v10 = app::routes::auth::login(&v9, v3, v4).await;
        let v11 = match v10 {
            Ok(ok) => ok,
            Err(v11) => {
                return {
                    let v12 = app::errors::api_error2response(&v11);
                    let v13 = pavex::Error::new(v11);
                    app::telemetry::error_logger(&v13, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v12)
                };
            }
        };
        <app::response::ApiResponse<
            app::models::UserSummary,
        > as pavex::IntoResponse>::into_response(v11)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::Response,
        v1: pavex_session::Session<'_>,
        v2: &mut pavex::cookie::ResponseCookies,
        v3: &biscotti::Processor,
        v4: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v5 = pavex_session::finalize_session(v0, v2, v3, v1).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex_session::errors::FinalizeError::into_response(&v6);
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v4).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v7)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v6)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a pavex::request::RequestHead,
        s_3: pavex_session::Session<'b>,
        s_4: &'c app::routes::auth::UserServiceContainer,
        s_5: pavex::cookie::ResponseCookies,
        s_6: &'d biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'a pavex::request::RequestHead,
            pavex_session::Session<'b>,
            &'c app::routes::auth::UserServiceContainer,
            pavex::cookie::ResponseCookies,
            &'d biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self
                .next)(
                self.s_0,
                self.s_1,
                self.s_2,
                self.s_3,
                self.s_4,
                self.s_5,
                self.s_6,
            )
        }
    }
    struct Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'d mut pavex_session::Session<'c>,
        s_4: &'e app::routes::auth::UserServiceContainer,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
            &'d mut pavex_session::Session<'c>,
            &'e app::routes::auth::UserServiceContainer,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next1<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4)
        }
    }
}
pub mod route_2 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex_session::SessionConfig,
        s_4: &'d pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::Response {
        let response = wrapping_1(s_0.clone(), &mut s_1).await;
        let response = post_processing_1(response, s_1, &mut s_2, s_3, &s_0).await;
        let response = post_processing_2(response, s_2, s_3, &s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
    ) -> pavex::Response {
        let response = handler(s_1, s_0).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex_session::SessionConfig,
        v4: &pavex_session::SessionStore,
    ) -> pavex::Response {
        let v5 = pavex::cookie::extract_request_cookies(v1, v0);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v1, v2, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v7)
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v1, v2, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v3);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v4, v3, v11);
        let v13 = crate::route_2::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v0,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &mut pavex_session::Session<'_>,
    ) -> pavex::Response {
        let v2 = crate::route_2::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &mut pavex_session::Session<'_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::routes::auth::logout(v0).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = app::errors::api_error2response(&v3);
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v4)
                };
            }
        };
        <app::response::ApiResponse<()> as pavex::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::Response,
        v1: pavex_session::Session<'_>,
        v2: &mut pavex::cookie::ResponseCookies,
        v3: &biscotti::Processor,
        v4: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v5 = pavex_session::finalize_session(v0, v2, v3, v1).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex_session::errors::FinalizeError::into_response(&v6);
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v4).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v7)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v6)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c mut pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c mut pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_3 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex::request::body::RawIncomingBody,
        s_1: pavex::request::path::MatchedPathPattern,
        s_2: &'a pavex::request::RequestHead,
        s_3: &'b app::routes::auth::UserServiceContainer,
        s_4: &'c biscotti::Processor,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5, s_6).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a pavex::request::RequestHead,
        s_3: &'b app::routes::auth::UserServiceContainer,
        mut s_4: pavex::cookie::ResponseCookies,
        s_5: &'c biscotti::Processor,
        s_6: &'d pavex_session::SessionConfig,
        s_7: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_1(s_1, s_0.clone(), s_2, s_3).await;
        let response = post_processing_1(s_5, s_2, &s_0, response, s_6, s_7, &mut s_4)
            .await;
        let response = post_processing_2(response, s_4, s_5, &s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'c app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let response = handler(s_1, s_2, s_0, s_3).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex::request::path::MatchedPathPattern,
        v2: &pavex::request::RequestHead,
        v3: &app::routes::auth::UserServiceContainer,
        v4: &biscotti::Processor,
        v5: &pavex_session::SessionConfig,
        v6: &pavex_session::SessionStore,
    ) -> pavex::Response {
        let v7 = pavex::cookie::ResponseCookies::new();
        let v8 = pavex::telemetry::ServerRequestId::generate();
        let v9 = app::telemetry::root_span(v2, v1, v8);
        let v10 = crate::route_3::Next0 {
            s_0: v9,
            s_1: v0,
            s_2: v2,
            s_3: v3,
            s_4: v7,
            s_5: v4,
            s_6: v5,
            s_7: v6,
            next: stage_1,
        };
        let v11 = pavex::middleware::Next::new(v10);
        let v12 = pavex::middleware::wrap_noop(v11).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v12)
    }
    async fn wrapping_1(
        v0: pavex::request::body::RawIncomingBody,
        v1: pavex_tracing::RootSpan,
        v2: &pavex::request::RequestHead,
        v3: &app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let v4 = crate::route_3::Next1 {
            s_0: &v1,
            s_1: v0,
            s_2: v2,
            s_3: v3,
            next: stage_2,
        };
        let v5 = pavex::middleware::Next::new(v4);
        let v6 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v1);
        let v7 = pavex_tracing::logger(v6, v5).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v7)
    }
    async fn handler(
        v0: pavex::request::body::RawIncomingBody,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: &app::routes::auth::UserServiceContainer,
    ) -> pavex::Response {
        let v4 = pavex::request::body::BodySizeLimit::new();
        let v5 = pavex::request::body::BufferedBody::extract(v1, v0, v4).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::request::body::errors::ExtractBufferedBodyError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v7)
                };
            }
        };
        let v7 = pavex::request::body::JsonBody::extract(v1, &v6);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::request::body::errors::ExtractJsonBodyError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v9)
                };
            }
        };
        let v9 = app::routes::auth::register(&v8, v3).await;
        let v10 = match v9 {
            Ok(ok) => ok,
            Err(v10) => {
                return {
                    let v11 = app::errors::api_error2response(&v10);
                    let v12 = pavex::Error::new(v10);
                    app::telemetry::error_logger(&v12, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v11)
                };
            }
        };
        <app::models::UserResponse as pavex::IntoResponse>::into_response(v10)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::Response,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
        v6: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::Response {
        let v7 = pavex::cookie::extract_request_cookies(v1, v0);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v9)
                };
            }
        };
        let v9 = pavex_session::SessionConfig::cookie_config(v4);
        let v10 = pavex_session::IncomingSession::extract(&v8, v9);
        let v11 = pavex_session::Session::new(v5, v4, v10);
        let v12 = pavex_session::finalize_session(v3, v6, v0, v11).await;
        let v13 = match v12 {
            Ok(ok) => ok,
            Err(v13) => {
                return {
                    let v14 = pavex_session::errors::FinalizeError::into_response(&v13);
                    let v15 = pavex::Error::new(v13);
                    app::telemetry::error_logger(&v15, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v14)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v13)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'a pavex::request::RequestHead,
        s_3: &'b app::routes::auth::UserServiceContainer,
        s_4: pavex::cookie::ResponseCookies,
        s_5: &'c biscotti::Processor,
        s_6: &'d pavex_session::SessionConfig,
        s_7: &'e pavex_session::SessionStore,
        next: fn(
            pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'a pavex::request::RequestHead,
            &'b app::routes::auth::UserServiceContainer,
            pavex::cookie::ResponseCookies,
            &'c biscotti::Processor,
            &'d pavex_session::SessionConfig,
            &'e pavex_session::SessionStore,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self
                .next)(
                self.s_0,
                self.s_1,
                self.s_2,
                self.s_3,
                self.s_4,
                self.s_5,
                self.s_6,
                self.s_7,
            )
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: pavex::request::body::RawIncomingBody,
        s_2: &'b pavex::request::RequestHead,
        s_3: &'c app::routes::auth::UserServiceContainer,
        next: fn(
            &'a pavex_tracing::RootSpan,
            pavex::request::body::RawIncomingBody,
            &'b pavex::request::RequestHead,
            &'c app::routes::auth::UserServiceContainer,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
}
pub mod route_4 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: &'a biscotti::Processor,
        s_1: &'b pavex::request::RequestHead,
        s_2: pavex::request::path::MatchedPathPattern,
        s_3: &'c pavex_session::SessionConfig,
        s_4: &'d pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b>(
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
    ) -> pavex::Response {
        let response = wrapping_1(s_0.clone(), &s_1).await;
        let response = post_processing_1(response, s_1, &mut s_2, s_3, &s_0).await;
        let response = post_processing_2(response, s_2, s_3, &s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c pavex_session::Session<'b>,
    ) -> pavex::Response {
        let response = handler(s_1, s_0).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: pavex::request::path::MatchedPathPattern,
        v3: &pavex_session::SessionConfig,
        v4: &pavex_session::SessionStore,
    ) -> pavex::Response {
        let v5 = pavex::cookie::extract_request_cookies(v1, v0);
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v6,
                    );
                    let v8 = pavex::Error::new(v6);
                    let v9 = pavex::telemetry::ServerRequestId::generate();
                    let v10 = app::telemetry::root_span(v1, v2, v9);
                    app::telemetry::error_logger(&v8, &v10).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v7)
                };
            }
        };
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v1, v2, v7);
        let v9 = pavex::cookie::ResponseCookies::new();
        let v10 = pavex_session::SessionConfig::cookie_config(v3);
        let v11 = pavex_session::IncomingSession::extract(&v6, v10);
        let v12 = pavex_session::Session::new(v4, v3, v11);
        let v13 = crate::route_4::Next0 {
            s_0: v8,
            s_1: v12,
            s_2: v9,
            s_3: v0,
            next: stage_1,
        };
        let v14 = pavex::middleware::Next::new(v13);
        let v15 = pavex::middleware::wrap_noop(v14).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v15)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex_session::Session<'_>,
    ) -> pavex::Response {
        let v2 = crate::route_4::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_session::Session<'_>,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::routes::auth::whoami(v0).await;
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = app::errors::api_error2response(&v3);
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v4)
                };
            }
        };
        <app::response::ApiResponse<
            app::models::WhoAmIResponse,
        > as pavex::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: pavex::Response,
        v1: pavex_session::Session<'_>,
        v2: &mut pavex::cookie::ResponseCookies,
        v3: &biscotti::Processor,
        v4: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v5 = pavex_session::finalize_session(v0, v2, v3, v1).await;
        let v6 = match v5 {
            Ok(ok) => ok,
            Err(v6) => {
                return {
                    let v7 = pavex_session::errors::FinalizeError::into_response(&v6);
                    let v8 = pavex::Error::new(v6);
                    app::telemetry::error_logger(&v8, v4).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v7)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v6)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex_session::Session<'a>,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        next: fn(
            pavex_tracing::RootSpan,
            pavex_session::Session<'a>,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next0<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3)
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'c pavex_session::Session<'b>,
        next: fn(&'a pavex_tracing::RootSpan, &'c pavex_session::Session<'b>) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_5 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
        s_2: &'b pavex_tera_template::TemplateEngine,
        s_3: &'c biscotti::Processor,
        s_4: &'d pavex_session::SessionConfig,
        s_5: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex_tera_template::TemplateEngine,
        mut s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        s_4: &'c pavex::request::RequestHead,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_1(s_0.clone(), s_1).await;
        let response = post_processing_1(s_3, s_4, &s_0, response, s_5, s_6, &mut s_2)
            .await;
        let response = post_processing_2(response, s_2, s_3, &s_0).await;
        response
    }
    async fn stage_2<'a, 'b>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex_tera_template::TemplateEngine,
    ) -> pavex::Response {
        let response = handler(s_1, s_0).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tera_template::TemplateEngine,
        v3: &biscotti::Processor,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
    ) -> pavex::Response {
        let v6 = pavex::cookie::ResponseCookies::new();
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v1, v0, v7);
        let v9 = crate::route_5::Next0 {
            s_0: v8,
            s_1: v2,
            s_2: v6,
            s_3: v3,
            s_4: v1,
            s_5: v4,
            s_6: v5,
            next: stage_1,
        };
        let v10 = pavex::middleware::Next::new(v9);
        let v11 = pavex::middleware::wrap_noop(v10).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v11)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex_tera_template::TemplateEngine,
    ) -> pavex::Response {
        let v2 = crate::route_5::Next1 {
            s_0: &v0,
            s_1: v1,
            next: stage_2,
        };
        let v3 = pavex::middleware::Next::new(v2);
        let v4 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v5 = pavex_tracing::logger(v4, v3).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    async fn handler(
        v0: &pavex_tera_template::TemplateEngine,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::routes::index::index(v0);
        let v3 = match v2 {
            Ok(ok) => ok,
            Err(v3) => {
                return {
                    let v4 = app::errors::api_error2response(&v3);
                    let v5 = pavex::Error::new(v3);
                    app::telemetry::error_logger(&v5, v1).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v4)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v3)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::Response,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
        v6: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::Response {
        let v7 = pavex::cookie::extract_request_cookies(v1, v0);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v9)
                };
            }
        };
        let v9 = pavex_session::SessionConfig::cookie_config(v4);
        let v10 = pavex_session::IncomingSession::extract(&v8, v9);
        let v11 = pavex_session::Session::new(v5, v4, v10);
        let v12 = pavex_session::finalize_session(v3, v6, v0, v11).await;
        let v13 = match v12 {
            Ok(ok) => ok,
            Err(v13) => {
                return {
                    let v14 = pavex_session::errors::FinalizeError::into_response(&v13);
                    let v15 = pavex::Error::new(v13);
                    app::telemetry::error_logger(&v15, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v14)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v13)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex_tera_template::TemplateEngine,
        s_2: pavex::cookie::ResponseCookies,
        s_3: &'b biscotti::Processor,
        s_4: &'c pavex::request::RequestHead,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex_session::SessionStore,
        next: fn(
            pavex_tracing::RootSpan,
            &'a pavex_tera_template::TemplateEngine,
            pavex::cookie::ResponseCookies,
            &'b biscotti::Processor,
            &'c pavex::request::RequestHead,
            &'d pavex_session::SessionConfig,
            &'e pavex_session::SessionStore,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self
                .next)(
                self.s_0,
                self.s_1,
                self.s_2,
                self.s_3,
                self.s_4,
                self.s_5,
                self.s_6,
            )
        }
    }
    struct Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex_tera_template::TemplateEngine,
        next: fn(
            &'a pavex_tracing::RootSpan,
            &'b pavex_tera_template::TemplateEngine,
        ) -> T,
    }
    impl<'a, 'b, T> std::future::IntoFuture for Next1<'a, 'b, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1)
        }
    }
}
pub mod route_6 {
    pub async fn entrypoint<'a, 'b, 'c, 'd>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
        s_2: &'b biscotti::Processor,
        s_3: &'c pavex_session::SessionConfig,
        s_4: &'d pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd>(
        s_0: pavex_tracing::RootSpan,
        mut s_1: pavex::cookie::ResponseCookies,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex::request::RequestHead,
        s_4: &'c pavex_session::SessionConfig,
        s_5: &'d pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_1(s_0.clone()).await;
        let response = post_processing_1(s_2, s_3, &s_0, response, s_4, s_5, &mut s_1)
            .await;
        let response = post_processing_2(response, s_1, s_2, &s_0).await;
        response
    }
    async fn stage_2<'a>(s_0: &'a pavex_tracing::RootSpan) -> pavex::Response {
        let response = handler().await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &biscotti::Processor,
        v3: &pavex_session::SessionConfig,
        v4: &pavex_session::SessionStore,
    ) -> pavex::Response {
        let v5 = pavex::cookie::ResponseCookies::new();
        let v6 = pavex::telemetry::ServerRequestId::generate();
        let v7 = app::telemetry::root_span(v1, v0, v6);
        let v8 = crate::route_6::Next0 {
            s_0: v7,
            s_1: v5,
            s_2: v2,
            s_3: v1,
            s_4: v3,
            s_5: v4,
            next: stage_1,
        };
        let v9 = pavex::middleware::Next::new(v8);
        let v10 = pavex::middleware::wrap_noop(v9).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v10)
    }
    async fn wrapping_1(v0: pavex_tracing::RootSpan) -> pavex::Response {
        let v1 = crate::route_6::Next1 {
            s_0: &v0,
            next: stage_2,
        };
        let v2 = pavex::middleware::Next::new(v1);
        let v3 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v4 = pavex_tracing::logger(v3, v2).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn handler() -> pavex::Response {
        let v0 = app::routes::ping::ping();
        <http::StatusCode as pavex::IntoResponse>::into_response(v0)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::Response,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
        v6: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::Response {
        let v7 = pavex::cookie::extract_request_cookies(v1, v0);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v9)
                };
            }
        };
        let v9 = pavex_session::SessionConfig::cookie_config(v4);
        let v10 = pavex_session::IncomingSession::extract(&v8, v9);
        let v11 = pavex_session::Session::new(v5, v4, v10);
        let v12 = pavex_session::finalize_session(v3, v6, v0, v11).await;
        let v13 = match v12 {
            Ok(ok) => ok,
            Err(v13) => {
                return {
                    let v14 = pavex_session::errors::FinalizeError::into_response(&v13);
                    let v15 = pavex::Error::new(v13);
                    app::telemetry::error_logger(&v15, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v14)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v13)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: pavex::cookie::ResponseCookies,
        s_2: &'a biscotti::Processor,
        s_3: &'b pavex::request::RequestHead,
        s_4: &'c pavex_session::SessionConfig,
        s_5: &'d pavex_session::SessionStore,
        next: fn(
            pavex_tracing::RootSpan,
            pavex::cookie::ResponseCookies,
            &'a biscotti::Processor,
            &'b pavex::request::RequestHead,
            &'c pavex_session::SessionConfig,
            &'d pavex_session::SessionStore,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2, self.s_3, self.s_4, self.s_5)
        }
    }
    struct Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        next: fn(&'a pavex_tracing::RootSpan) -> T,
    }
    impl<'a, T> std::future::IntoFuture for Next1<'a, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0)
        }
    }
}
pub mod route_7 {
    pub async fn entrypoint<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex::request::path::MatchedPathPattern,
        s_1: &'a pavex::request::RequestHead,
        s_2: &'b pavex_static_files::StaticServer,
        s_3: &'c biscotti::Processor,
        s_4: &'d pavex_session::SessionConfig,
        s_5: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_0(s_0, s_1, s_2, s_3, s_4, s_5).await;
        response
    }
    async fn stage_1<'a, 'b, 'c, 'd, 'e>(
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex_static_files::StaticServer,
        s_2: &'b pavex::request::RequestHead,
        mut s_3: pavex::cookie::ResponseCookies,
        s_4: &'c biscotti::Processor,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex_session::SessionStore,
    ) -> pavex::Response {
        let response = wrapping_1(s_0.clone(), s_1, s_2).await;
        let response = post_processing_1(s_4, s_2, &s_0, response, s_5, s_6, &mut s_3)
            .await;
        let response = post_processing_2(response, s_3, s_4, &s_0).await;
        response
    }
    async fn stage_2<'a, 'b, 'c>(
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex_static_files::StaticServer,
        s_2: &'c pavex::request::RequestHead,
    ) -> pavex::Response {
        let response = handler(s_1, s_2, s_0).await;
        let response = post_processing_0(response, s_0).await;
        response
    }
    async fn wrapping_0(
        v0: pavex::request::path::MatchedPathPattern,
        v1: &pavex::request::RequestHead,
        v2: &pavex_static_files::StaticServer,
        v3: &biscotti::Processor,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
    ) -> pavex::Response {
        let v6 = pavex::cookie::ResponseCookies::new();
        let v7 = pavex::telemetry::ServerRequestId::generate();
        let v8 = app::telemetry::root_span(v1, v0, v7);
        let v9 = crate::route_7::Next0 {
            s_0: v8,
            s_1: v2,
            s_2: v1,
            s_3: v6,
            s_4: v3,
            s_5: v4,
            s_6: v5,
            next: stage_1,
        };
        let v10 = pavex::middleware::Next::new(v9);
        let v11 = pavex::middleware::wrap_noop(v10).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v11)
    }
    async fn wrapping_1(
        v0: pavex_tracing::RootSpan,
        v1: &pavex_static_files::StaticServer,
        v2: &pavex::request::RequestHead,
    ) -> pavex::Response {
        let v3 = crate::route_7::Next1 {
            s_0: &v0,
            s_1: v1,
            s_2: v2,
            next: stage_2,
        };
        let v4 = pavex::middleware::Next::new(v3);
        let v5 = <pavex_tracing::RootSpan as core::clone::Clone>::clone(&v0);
        let v6 = pavex_tracing::logger(v5, v4).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v6)
    }
    async fn handler(
        v0: &pavex_static_files::StaticServer,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v3 = app::routes::static_server::get_static_file(v0, v1);
        let v4 = match v3 {
            Ok(ok) => ok,
            Err(v4) => {
                return {
                    let v5 = app::errors::api_error2response(&v4);
                    let v6 = pavex::Error::new(v4);
                    app::telemetry::error_logger(&v6, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v5)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v4)
    }
    async fn post_processing_0(
        v0: pavex::Response,
        v1: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v2 = app::telemetry::response_logger(v0, v1).await;
        <pavex::Response as pavex::IntoResponse>::into_response(v2)
    }
    async fn post_processing_1(
        v0: &biscotti::Processor,
        v1: &pavex::request::RequestHead,
        v2: &pavex_tracing::RootSpan,
        v3: pavex::Response,
        v4: &pavex_session::SessionConfig,
        v5: &pavex_session::SessionStore,
        v6: &mut pavex::cookie::ResponseCookies,
    ) -> pavex::Response {
        let v7 = pavex::cookie::extract_request_cookies(v1, v0);
        let v8 = match v7 {
            Ok(ok) => ok,
            Err(v8) => {
                return {
                    let v9 = pavex::cookie::errors::ExtractRequestCookiesError::into_response(
                        &v8,
                    );
                    let v10 = pavex::Error::new(v8);
                    app::telemetry::error_logger(&v10, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v9)
                };
            }
        };
        let v9 = pavex_session::SessionConfig::cookie_config(v4);
        let v10 = pavex_session::IncomingSession::extract(&v8, v9);
        let v11 = pavex_session::Session::new(v5, v4, v10);
        let v12 = pavex_session::finalize_session(v3, v6, v0, v11).await;
        let v13 = match v12 {
            Ok(ok) => ok,
            Err(v13) => {
                return {
                    let v14 = pavex_session::errors::FinalizeError::into_response(&v13);
                    let v15 = pavex::Error::new(v13);
                    app::telemetry::error_logger(&v15, v2).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v14)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v13)
    }
    async fn post_processing_2(
        v0: pavex::Response,
        v1: pavex::cookie::ResponseCookies,
        v2: &biscotti::Processor,
        v3: &pavex_tracing::RootSpan,
    ) -> pavex::Response {
        let v4 = pavex::cookie::inject_response_cookies(v0, v1, v2);
        let v5 = match v4 {
            Ok(ok) => ok,
            Err(v5) => {
                return {
                    let v6 = pavex::cookie::errors::InjectResponseCookiesError::into_response(
                        &v5,
                    );
                    let v7 = pavex::Error::new(v5);
                    app::telemetry::error_logger(&v7, v3).await;
                    <pavex::Response as pavex::IntoResponse>::into_response(v6)
                };
            }
        };
        <pavex::Response as pavex::IntoResponse>::into_response(v5)
    }
    struct Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: pavex_tracing::RootSpan,
        s_1: &'a pavex_static_files::StaticServer,
        s_2: &'b pavex::request::RequestHead,
        s_3: pavex::cookie::ResponseCookies,
        s_4: &'c biscotti::Processor,
        s_5: &'d pavex_session::SessionConfig,
        s_6: &'e pavex_session::SessionStore,
        next: fn(
            pavex_tracing::RootSpan,
            &'a pavex_static_files::StaticServer,
            &'b pavex::request::RequestHead,
            pavex::cookie::ResponseCookies,
            &'c biscotti::Processor,
            &'d pavex_session::SessionConfig,
            &'e pavex_session::SessionStore,
        ) -> T,
    }
    impl<'a, 'b, 'c, 'd, 'e, T> std::future::IntoFuture for Next0<'a, 'b, 'c, 'd, 'e, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self
                .next)(
                self.s_0,
                self.s_1,
                self.s_2,
                self.s_3,
                self.s_4,
                self.s_5,
                self.s_6,
            )
        }
    }
    struct Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        s_0: &'a pavex_tracing::RootSpan,
        s_1: &'b pavex_static_files::StaticServer,
        s_2: &'c pavex::request::RequestHead,
        next: fn(
            &'a pavex_tracing::RootSpan,
            &'b pavex_static_files::StaticServer,
            &'c pavex::request::RequestHead,
        ) -> T,
    }
    impl<'a, 'b, 'c, T> std::future::IntoFuture for Next1<'a, 'b, 'c, T>
    where
        T: std::future::Future<Output = pavex::Response>,
    {
        type Output = pavex::Response;
        type IntoFuture = T;
        fn into_future(self) -> Self::IntoFuture {
            (self.next)(self.s_0, self.s_1, self.s_2)
        }
    }
}
